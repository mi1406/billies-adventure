#BlueJ class context
comment0.target=Room
comment0.text=\r\n\ Class\ Room\ -\ a\ room\ in\ an\ adventure\ game.\r\n\r\n\ This\ class\ is\ part\ of\ the\ "World\ of\ Zuul"\ application.\ \r\n\ "World\ of\ Zuul"\ is\ a\ very\ simple,\ text\ based\ adventure\ game.\ \ \r\n\r\n\ A\ "Room"\ represents\ one\ location\ in\ the\ scenery\ of\ the\ game.\ \ It\ is\ \r\n\ connected\ to\ other\ rooms\ via\ exits.\ \ For\ each\ existing\ exit,\ the\ room\ \r\n\ stores\ a\ reference\ to\ the\ neighboring\ room.\r\n\ \r\n\ @author\ \ Michael\ K\u00F6lling\ and\ David\ J.\ Barnes\r\n\ @version\ 2016.02.29\r\n
comment1.params=description
comment1.target=Room(java.lang.String)
comment1.text=\r\n\ Create\ a\ room\ described\ "description".\ Initially,\ it\ has\r\n\ no\ exits.\ "description"\ is\ something\ like\ "a\ kitchen"\ or\r\n\ "an\ open\ court\ yard".\r\n\ @param\ description\ The\ room's\ description.\r\n
comment10.params=
comment10.target=java.lang.String\ getExitString()
comment10.text=\r\n\ Return\ a\ string\ describing\ the\ room's\ exits,\ for\ example\r\n\ "Exits\:\ north\ west".\r\n\ @return\ Details\ of\ the\ room's\ exits.\r\n
comment11.params=direction
comment11.target=Room\ getExit(java.lang.String)
comment11.text=\r\n\ Return\ the\ room\ that\ is\ reached\ if\ we\ go\ from\ this\ room\ in\ direction\r\n\ "direction".\ If\ there\ is\ no\ room\ in\ that\ direction,\ return\ null.\r\n\ @param\ direction\ The\ exit's\ direction.\r\n\ @return\ The\ room\ in\ the\ given\ direction.\r\n
comment12.params=
comment12.target=boolean\ hasBattle()
comment12.text=\r\n\ Checks\ if\ the\ current\ room\ has\ battle\r\n
comment13.params=item
comment13.target=void\ setItem(Item)
comment13.text=\r\n\ \ Method\ allowing\ the\ placement\ of\ items\ in\ the\ room.\r\n
comment14.params=item
comment14.target=void\ removeItem(Item)
comment14.text=\r\n\ \ Method\ removing\ taken\ item\ from\ the\ room.\r\n
comment15.params=
comment15.target=void\ listItems()
comment15.text=\r\n\ \ Method\ allowing\ the\ player\ to\ "see"\r\n\ \ the\ content\ of\ the\ room.\r\n
comment16.params=
comment16.target=boolean\ hasItem()
comment16.text=\r\n\ Checks\ if\ the\ room\ has\ any\ items.\r\n\ Used\ by\ Game\ class.\r\n\ @returns\ boolean\r\n
comment17.params=index
comment17.target=Hero\ getEnemyIndex(int)
comment17.text=\r\n\ Used\ to\ loop\ through\ the\ list\ od\ enemies\ \r\n\ and\ return\ them\ one\ by\ one\ for\ rooms\ with\ \r\n\ more\ than\ one\ enemy.\r\n\ @param\ index\ of\ enemy\ inside\ the\ ArrayList.\r\n\ @returns\ The\ enemy\ object.\r\n
comment18.params=itemName
comment18.target=int\ countItems(java.lang.String)
comment18.text=\r\n\ Counts\ how\ many\ items\ are\ there\ in\ a\ room.\r\n\ @param\ ItemName\ string\ with\ the\ item\ name\ the\ way\ it's\ called\ in\ the\ game.\r\n\ @returns\ int\ number\ of\ items.\r\n
comment19.params=state
comment19.target=void\ setSearched(boolean)
comment19.text=\r\n\ Method\ to\ set\ the\ state\ of\ the\ room.\r\n\ Does\ not\ allow\ items\ to\ be\ taken\ upon\ reentry.\r\n\ @param\ state\ true\ or\ false\r\n
comment2.params=
comment2.target=Room\ clone()
comment20.params=
comment20.target=boolean\ isSearched()
comment20.text=\r\n\ Returns\ the\ effect\ of\ method\ setSearched();\r\n\ @returns\ boolean.\r\n
comment21.params=faind
comment21.target=void\ setEnemy(Hero)
comment21.text=\r\n\ Method\ to\ add\ a\ enemy\ after\ the\ creation\ of\ the\ room\r\n\ @param\ enemy\ required\ class\ Hero.\r\n
comment22.params=state
comment22.target=void\ setHasBattle(boolean)
comment22.text=\r\n\ Method\ used\ to\ prevent\ triggering\ of\ battle\ upon\ reentry.\r\n\ @param\ state\ boolean\r\n
comment23.params=
comment23.target=int\ numberEnemies()
comment23.text=\r\n\ Method\ giving\ the\ size\ of\ the\ ArrayList\ containing\ the\ enemies.\r\n\ @returns\ Integer.\r\n
comment24.params=
comment24.target=java.util.ArrayList\ getItems()
comment3.params=direction\ neighbor
comment3.target=void\ setExit(java.lang.String,\ Room)
comment3.text=\r\n\ Define\ an\ exit\ from\ this\ room.\r\n\ @param\ direction\ The\ direction\ of\ the\ exit.\r\n\ @param\ neighbor\ \ The\ room\ to\ which\ the\ exit\ leads.\r\n
comment4.params=
comment4.target=java.lang.String\ getShortDescription()
comment4.text=\r\n\ @return\ The\ short\ description\ of\ the\ room\r\n\ (the\ one\ that\ was\ defined\ in\ the\ constructor).\r\n
comment5.params=clones
comment5.target=void\ setEnemiesClone(java.util.ArrayList)
comment5.text=\r\n\ Used\ to\ reset\ the\ room\ to\ a\ previous\ state\ as\ specified\ by\ the\ requirements\ for\ a\ back\ command.\r\n\ Currently\ does\ not\ work.\r\n
comment6.params=clone
comment6.target=void\ setItemsClone(java.util.ArrayList)
comment7.params=
comment7.target=java.lang.String\ getLongDescription()
comment7.text=\r\n\ Return\ a\ description\ of\ the\ room\ in\ the\ form\:\r\n\ \ \ \ \ You\ are\ in\ the\ kitchen.\r\n\ \ \ \ \ Exits\:\ north\ west\r\n\ @return\ A\ long\ description\ of\ this\ room\r\n
comment8.params=
comment8.target=void\ printStory()
comment8.text=\r\n\ Prints\ the\ string\ describinf\ the\ room\ atmosphere\r\n
comment9.params=story
comment9.target=void\ setSetUp(java.lang.String)
comment9.text=\r\n\ Adds\ a\ longer\ description\ to\ the\ room.\r\n
numComments=25
